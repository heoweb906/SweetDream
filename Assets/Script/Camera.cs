using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using static UnityEngine.GraphicsBuffer;

public class Camera : MonoBehaviour
{
    public PlayerInformation playerInformation;
    public UI_InGame inGame_UI;
    public Player player;

    public Transform target; // 플레이어의 Transform을 저장할 변수
    public Vector3 offset;   // 카메라와 플레이어 사이의 거리
    public float turnSpeed; // 마우스 회전 속도    
    private float xRotate = 0.0f; // 내부 사용할 X축 회전량은 별도 정의 ( 카메라 위 아래 방향 )


    private void Start()
    {
        inGame_UI = FindAnyObjectByType<UI_InGame>();
        player = FindAnyObjectByType<Player>();
        SetMouseSpeed();
    }

    public void SetMouseSpeed()
    {
        playerInformation = FindObjectOfType<PlayerInformation>();
        turnSpeed = playerInformation.MouseSpeed * 4f; // 마우스 감도 값은 0~1로 관리하고 있음, 실제 적용시에만 4를 곱해줌
    }


    void Update()
    {
        if (target != null)
        {
            Vector3 desiredPosition = target.position + offset;
            transform.position = desiredPosition;
        }

        if(!(inGame_UI.isSettingPanel) && !(player.isDie))
        {
            // 좌우로 움직인 마우스의 이동량 * 속도에 따라 카메라가 좌우로 회전할 양 계산
            float yRotateSize = Input.GetAxis("Mouse X") * turnSpeed;
            // 현재 y축 회전값에 더한 새로운 회전각도 계산
            float yRotate = transform.eulerAngles.y + yRotateSize;

            // 위아래로 움직인 마우스의 이동량 * 속도에 따라 카메라가 회전할 양 계산(하늘, 바닥을 바라보는 동작)
            float xRotateSize = -Input.GetAxis("Mouse Y") * turnSpeed;
            // 위아래 회전량을 더해주지만 -45도 ~ 80도로 제한 (-45:하늘방향, 80:바닥방향)
            xRotate = Mathf.Clamp(xRotate + xRotateSize, -80, 80);

            // 카메라 회전량을 카메라에 반영(X, Y축만 회전)
            transform.eulerAngles = new Vector3(xRotate, yRotate, 0);

            // 플레이어 오브젝트의 회전도 카메라와 같게 설정 (카메라 회전값을 플레이어에 적용)
            target.rotation = Quaternion.Euler(0, yRotate, 0);
        }
    }
}
